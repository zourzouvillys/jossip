plugins {
  id 'eclipse'
  id 'com.diffplug.eclipse.apt'
}

if (false && project.rootProject != project) {
	if (project.rootProject.tasks.findByName('cleanEclipseFactorypath')) {
	  project.rootProject.tasks['configureBuildship'].dependsOn(
	    tasks['cleanEclipseClasspath'],
	    tasks['cleanEclipseFactorypath'],
	    tasks['cleanEclipseJdtApt'],
	    tasks['cleanEclipseJdt'],
	    tasks['cleanEclipseProject'],
	    tasks['eclipseClasspath'],
	    tasks['eclipseFactorypath'],
	    tasks['eclipseJdtApt'],
	    tasks['eclipseProject'],
	    tasks['eclipseJdt'],
	  )  
	}
	else if (project.rootProject.tasks.findByName('eclipseFactorypath')) {
	  project.rootProject.tasks['configureBuildship'].dependsOn(
	    tasks['eclipseClasspath'],
	    tasks['eclipseFactorypath'],
	    tasks['eclipseJdtApt'],
	    tasks['eclipseProject'],
	    tasks['eclipseJdt'],
	  )
	}
	else if (tasks.findByName('eclipseClasspath')) {
	  project.rootProject.tasks['configureBuildship'].dependsOn(
	    tasks['eclipseClasspath'],
	    tasks['eclipseJdtApt'],
	    tasks['eclipseProject'],
	    tasks['eclipseJdt'],
	  )
	}
}


eclipse {
  
  project.name = createProjectDisplayName()

  // update any classpaths for generated code to ignore_optional_problems using whenMerged

  classpath.file.whenMerged { classpath ->
    classpath.entries.findAll { it.path == 'bin/generated-sources/annotations' || it.path == '.apt_generated' || it.path.startsWith('build/generated/') || it.path.startsWith('bin/generated-sources/') }.each {
	      it.entryAttributes['ignore_optional_problems'] = true
	}
  }
  
}


def createProjectDisplayName() {
  if (project == project.rootProject) {
    return project.name  
  }
  return "${project.rootProject.name}${project.path}"
}

