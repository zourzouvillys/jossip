
import org.gradle.plugins.ide.eclipse.model.ProjectDependency
import org.gradle.plugins.ide.eclipse.model.SourceFolder

plugins {
  id 'eclipse'
  id 'com.diffplug.eclipse.apt'
}

if (project.rootProject != project) {
	if (project.rootProject.tasks.findByName('cleanEclipseFactorypath')) {
	  project.rootProject.tasks['configureBuildship'].dependsOn(
	    tasks['cleanEclipseClasspath'],
	    tasks['cleanEclipseFactorypath'],
	    tasks['cleanEclipseJdtApt'],
	    tasks['cleanEclipseJdt'],
	    tasks['cleanEclipseProject'],
	    tasks['eclipseClasspath'],
	    tasks['eclipseFactorypath'],
	    tasks['eclipseJdtApt'],
	    tasks['eclipseProject'],
	    tasks['eclipseJdt'],
	  )  
	}
	else if (project.rootProject.tasks.findByName('eclipseFactorypath')) {
	  project.rootProject.tasks['configureBuildship'].dependsOn(
	    tasks['eclipseClasspath'],
	    tasks['eclipseFactorypath'],
	    tasks['eclipseJdtApt'],
	    tasks['eclipseProject'],
	    tasks['eclipseJdt'],
	  )
	}
	else if (tasks.findByName('eclipseClasspath')) {
	  project.rootProject.tasks['configureBuildship'].dependsOn(
	    tasks['eclipseClasspath'],
	    tasks['eclipseJdtApt'],
	    tasks['eclipseProject'],
	    tasks['eclipseJdt'],
	  )
	}
}


eclipse {
  
  project.name = createProjectDisplayName()

  classpath.file.whenMerged { classpath ->
    classpath.entries.find { it.path == '.apt_generated' }.each {
      classpath.entries.remove(it)
    }
    // ignore compilation warnings in the apt-generated code		
    def lib = new org.gradle.plugins.ide.eclipse.model.SourceFolder('.apt_generated', null)
    lib.entryAttributes['ignore_optional_problems'] = true
    lib.entryAttributes['optional'] = true
    //lib.entryAttributes['module'] = true
    classpath.entries.add(lib)  
  }
  
}


def createProjectDisplayName() {
  if (project == project.rootProject) {
    return project.name  
  }
  return "${project.rootProject.name}${project.path}"
}

