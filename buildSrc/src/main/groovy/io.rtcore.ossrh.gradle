
plugins {
  id 'signing'
  id 'maven-publish'
}

signing {
  useGpgCmd()
  sign publishing.publications
}


def calculateReleaseUrl(version) {
  if (rootProject.hasProperty('repositoryId')) {
    return 'https://s01.oss.sonatype.org/service/local/staging/deployByRepositoryId/' + rootProject.repositoryId
  }
  else if (version.endsWith('SNAPSHOT')) {
    return 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
  }
  else {
    // https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/
    return 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
  }
}


afterEvaluate {

  publishing {
    publications {
      maven(MavenPublication) {
        pom {
          name = project.group + ":" + project.name
          url = 'https://github.com/zourzouvillys/jossip/'
          afterEvaluate {
            // description is not available until evaluated.
            description = project.description
          }
          scm {
            connection = 'scm:git:https://github.com/zourzouvillys/jossip.git'
            developerConnection = 'scm:git:https://github.com/zourzouvillys/jossip.git'
            url = 'https://github.com/zourzouvillys/jossip'
          }
          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }
          developers {
            developer {
              id = 'zourzouvillys'
              name = 'Theo Zourzouvillys'
              email = 'theo@zrz.io'
            }
          }
        }
      }
    }

    repositories {
      maven {
        if (rootProject.hasProperty('repositoryDir')) {
          url = new File(rootProject.repositoryDir).toURI()
        }
        else {
          credentials {
            if (rootProject.hasProperty('ossrhUsername') && rootProject.hasProperty('ossrhPassword')) {
              username = rootProject.ossrhUsername
              password = rootProject.ossrhPassword
            }
          }
          url = calculateReleaseUrl(version)        
        }
      }
    }
    
  }

  plugins.withId("java") {
    publishing {
      publications {
        maven {
        
          from components.java
   
          artifact sourcesJar {
            archiveClassifier = 'sources'
          }
      
          artifact javadocJar {
            archiveClassifier = 'javadoc'
          }
          
        }
      }
    }
  }

}

