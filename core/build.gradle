plugins {
  id 'application'
  id 'eclipse'
  id 'net.ltgt.apt-eclipse'
}

mainClassName = 'io.rtcore.sip.proxy.EntryPoint'

applicationDefaultJvmArgs = [
  '--illegal-access=permit',
  '--add-exports', 'java.base/jdk.internal.ref=ALL-UNNAMED',
  //'--add-exports', 'java.base/jdk.internal.misc=ALL-UNNAMED',
  //'--add-opens', 'java.base/jdk.internal.module=ALL-UNNAMED',
  //'--add-exports', 'java.base/java.lang.reflect=ALL-UNNAMED',
  //'--add-exports', 'java.base/sun.nio.ch=ALL-UNNAMED',  
]


dependencies {
  implementation project(':parser')
  implementation project(':netty')
  implementation 'io.zrz.jpgsql:jpgsql-client:64be224'
  implementation 'org.slf4j:slf4j-api:1.7.30'
  implementation 'com.google.guava:guava:30.1-jre'
  implementation 'com.google.re2j:re2j:1.6'
  implementation 'io.netty:netty-codec'
  implementation 'io.netty:netty-handler'
  implementation 'io.netty:netty-codec-http2'
  implementation 'com.squareup.retrofit2:retrofit:2.9.0'
  implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
  
}

// aws plugin
dependencies {
  implementation 'software.amazon.awssdk:sts'
  implementation 'software.amazon.awssdk:sqs'
  implementation 'software.amazon.awssdk:xray'
  implementation 'software.amazon.awssdk:rds'
  implementation 'software.amazon.awssdk:secretsmanager'
  implementation 'org.rocksdb:rocksdbjni:6.16.4'
}


dependencies {

//implementation 'io.micronaut.jaxrs:micronaut-jaxrs-server'
//implementation 'io.micronaut.jaxrs:micronaut-jaxrs-processor'

  annotationProcessor("io.micronaut:micronaut-inject-java")
  annotationProcessor("io.micronaut:micronaut-validation")
  implementation("io.micronaut:micronaut-inject")
  implementation("io.micronaut:micronaut-validation")
  implementation("io.micronaut:micronaut-runtime")
  implementation("javax.annotation:javax.annotation-api")
  implementation("io.micronaut:micronaut-http-server-netty")
  implementation("io.micronaut:micronaut-http-client") 
  implementation("io.micronaut:micronaut-http-server-netty")


  implementation 'info.picocli:picocli:4.6.1'
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-avro'
  implementation 'io.reactivex.rxjava3:rxjava:3.0.12'
  implementation 'com.fasterxml.jackson.core:jackson-core'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-guava'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
  //implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jaxrs'
  
  
  
  
  implementation('net.openhft:chronicle-queue') {
    exclude group: "net.openhft", module: "affinity"
  }
  
  
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
        '-parameters',
        // enables incremental compilation
        '-Amicronaut.processing.incremental=true',
        '-Amicronaut.processing.annotations=io.rtcore.sip.proxy.*',
        "-Amicronaut.processing.group=$project.group",
        "-Amicronaut.processing.module=$project.name",
    ])
}

tasks.withType(JavaExec) {
    //classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
            'micronaut.io.watch.restart':'true',
            'micronaut.io.watch.enabled':'true',
            "micronaut.io.watch.paths":"src/main"
        )
    }
}




dependencies {
  compileOnly 'org.immutables:value-annotations:2.8.8'
  annotationProcessor 'org.immutables:value:2.8.8'
  annotationProcessor 'com.google.auto.service:auto-service:1.0'
}

dependencies {
  
  runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testImplementation 'org.junit.jupiter:junit-jupiter-params' 
  testImplementation 'org.assertj:assertj-core:3.19.0'
  
}

test {
  useJUnitPlatform()
  minHeapSize = "128m"
  maxHeapSize = "2g"
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
}

eclipse {
  synchronizationTasks 'eclipseJdtApt', 'eclipseFactorypath', 'eclipseJdt'
  project.name = "jossip:${project.name}"
}


