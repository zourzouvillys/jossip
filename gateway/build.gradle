
plugins {
  id 'com.google.protobuf'
  id 'io.rtcore.java'
  id 'io.rtcore.immutables'
  id 'com.google.cloud.tools.jib'
  id 'com.ryandens.javaagent-application'
  id 'com.ryandens.javaagent-jib'
  id 'application'
  id 'java-junit-convention'
}


protobuf {

  protoc {
    artifact = "com.google.protobuf:protoc:${libs.versions.protobuf.get()}"
  }
  
  clean {
    delete protobuf.generatedFilesBaseDir
  }
    
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:${libs.versions.grpc.get()}"
    }
    rxgrpc {
      artifact = "com.salesforce.servicelibs:rx3grpc:${libs.versions.rxgrpc.get()}"
    }
    reactor {
      artifact = "com.salesforce.servicelibs:reactor-grpc:${libs.versions.rxgrpc.get()}"
    }
  }
  
  generateProtoTasks {
    all()*.plugins {
      grpc {}
      rxgrpc {}
      reactor {}
    }
  }
  
}


sourceSets.main.java.srcDir new File(buildDir, 'generated/source/proto/main/grpc')
sourceSets.main.java.srcDir new File(buildDir, 'generated/source/proto/main/rxgrpc')
sourceSets.main.java.srcDir new File(buildDir, 'generated/source/proto/main/reactor')
sourceSets.main.java.srcDir new File(buildDir, 'generated/source/proto/main/java')


description = 'RTCore SIP: Protocol Gateway'

dependencies {
  implementation libs.protobuf.java.util
  implementation platform(libs.grpc.bom)
  implementation "io.grpc:grpc-protobuf"
  implementation "io.grpc:grpc-services"
  implementation "io.grpc:grpc-stub"
  implementation 'com.salesforce.servicelibs:rx3grpc-stub:1.2.4'
  implementation 'com.salesforce.servicelibs:reactor-grpc-stub:1.2.4'
  runtimeOnly "io.grpc:grpc-netty-shaded"
  compileOnly "org.apache.tomcat:annotations-api:6.0.53"
  testImplementation "io.grpc:grpc-testing"
  implementation 'org.apache.commons:commons-rng-core:1.5'
  implementation 'net.jodah:expiringmap:0.5.10'
}


dependencies {
  implementation libs.dagger
  annotationProcessor libs.dagger.compiler
  annotationProcessor libs.guava
  implementation libs.picocli
  implementation libs.guava
  implementation libs.slf4j.api
  implementation project(':gateway-api')
  implementation project(':sip-channels')
  implementation project(':sip-channels-netty')
  implementation project(':netty-codec-sip')
  implementation libs.javax.inject
}

dependencies {
  // import a BOM
  implementation platform('io.projectreactor:reactor-bom:2023.0.0') 
  // define dependencies without versions
  implementation 'io.projectreactor.netty:reactor-netty-core' 
  implementation 'io.projectreactor.netty:reactor-netty-http'    
}

dependencies {
  implementation libs.slf4j.api
  implementation 'org.slf4j:jul-to-slf4j:2.0.9'
  runtimeOnly libs.logback.classic
  runtimeOnly 'net.logstash.logback:logstash-logback-encoder:7.4'
  //javaagent 'com.datadoghq:dd-java-agent:0.115.0'
  implementation 'org.zalando:problem:0.27.1'
  implementation 'org.zalando:jackson-datatype-problem:0.27.1'
  
}

dependencies {

  implementation platform(libs.jersey.bom)

  implementation 'org.glassfish.grizzly:grizzly-npn-api:2.0.0'
  implementation 'org.glassfish.grizzly:grizzly-websockets:4.0.0'
  implementation 'org.glassfish.grizzly:grizzly-http2:4.0.0'
  
  
  implementation 'org.glassfish.jersey.containers:jersey-container-grizzly2-http'
  implementation 'org.glassfish.jersey.inject:jersey-hk2'
  implementation 'org.glassfish.jersey.media:jersey-media-json-jackson'
  implementation 'org.glassfish.jersey.media:jersey-media-sse'
  implementation 'org.glassfish.jersey.ext:jersey-bean-validation'
  
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
  implementation 'com.sun.xml.bind:jaxb-osgi:4.0.3'
  
  implementation platform(libs.jackson.bom)
  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-toml'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-guava'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
  
  testImplementation 'org.glassfish.jersey.test-framework:jersey-test-framework-core'
  testImplementation 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2'
}

testing {
  suites {
    test {
      useJUnitJupiter('5.9.3')
    }
  }
}

dependencies {

  testImplementation(platform(testLibs.junit.bom))
  testImplementation('org.junit.jupiter:junit-jupiter')
  
  //testImplementation testLibs.assert4j.core
  //testImplementation('org.awaitility:awaitility:4.2.0')
  //testImplementation libs.rxjava3
  //testImplementation libs.rxjava3.jdk9interop
  //testImplementation 'com.google.truth:truth:1.1.5'
  //testImplementation 'com.google.truth.extensions:truth-java8-extension:1.1.5'
  //testImplementation 'com.google.truth.extensions:truth-re2j-extension:1.1.5'  
  //testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
}





application {
  applicationName = 'rtcore-gateway'
  mainClass = 'io.rtcore.gateway.EntryPoint'
  applicationDefaultJvmArgs = [
  ]
}


jib {

  from {
    image = 'public.ecr.aws/amazoncorretto/amazoncorretto:19'
    platforms {
      platform {
        architecture = 'amd64'
        os = 'linux'
      }
      /*
      platform {
        architecture = 'arm64'
        os = 'linux'
      }
      */
    }
  }
  
  to {
    //image = 'xxx'
    // credHelper = 'ecr-login'
    tags = [ 'latest' ]
  }
  
  container {
    mainClass = 'io.rtcore.gateway.EntryPoint'
    jvmFlags = [ ]
    ports = [ '80/tcp' ]
  }

}

